package gen

import (
	"log"
	"os"
	"path/filepath"

	"github.com/google/go-jsonnet"
)

// File is the generated file of a given output.
type File struct {
	// Path is the jsonnet key/path.
	Path string
	// Content is the jsonnet content.
	Content string
}

// Compiled represents a compiled jsonnet file.
type Compiled struct {
	// Path is the jsonnet key/path.
	Path string
	// Content is a JSON compiled representation generated by jsonnet compiler.
	Content string
}

// Compiler compile jsonnet files into json definitions.
type Compiler struct {
	VM *jsonnet.VM
}

const jsonnetExt = ".jsonnet"

// isJsonnet returns if the file specified on the filePath is a jsonnet file.
func isJsonnet(filePath string) bool {
	return filepath.Ext(filePath) == jsonnetExt
}

// Compile compiles all files and return the generated config files.
func (c *Compiler) Compile(files <-chan File) <-chan Compiled {
	output := make(chan Compiled)
	logger := log.New(os.Stdout, log.Prefix(), log.Flags())

	go func() {
		for file := range files {
			logger.SetPrefix("[compiler]: [%s]")

			path := file.Path

			if !isJsonnet(path) {
				continue
			}

			out, err := c.VM.EvaluateFile(file.Path)
			if err != nil {
				logger.Println(err)
				continue
			}
			output <- Compiled{
				Path:    path,
				Content: out,
			}
		}

		close(output)
	}()

	return output
}

// NewCompiler creates a new compiler instance.
func NewCompiler(vm *jsonnet.VM) *Compiler {
	return &Compiler{
		VM: vm,
	}
}
